-# This template represents a profile field, which can be shown on profiles of users or groups.
-# A profile field can either have just label and value or it can have child profile fields
-# in order to display complex information such as bank account information.
-#
- profile_field_css_class = profile_field.parent ? 'attribute profile_field profile_field_child' : 'attribute profile_field profile_field_parent'
- input_type = 'input'
- input_type = 'textarea' if %w(ProfileFieldTypes::Address ProfileFieldTypes::Description ProfileFieldTypes::About).include? profile_field.type   
-# # For the moment, no 'date' type. The date selector does not work properly with edit_mode.
-# input_type = 'date' if profile_field.type == "ProfileFieldTypes::Date"
- no_remove ||= false
- lock_label ||= false
- if profile_field.type == "ProfileFieldTypes::About"
  - display_method = { :display_with => :markdown }
- else
  - display_method = { :display_as => :display_html }

%li{:class => profile_field_css_class, id: "profile_field_id_#{profile_field.id}" }

  - # remove button
  - unless no_remove
    %span.button-wrapper
      - unless profile_field.parent
        - if can? :destroy, profile_field
          = remove_button(profile_field)
    
  - # label
  %span.label-wrapper
    - if profile_field.parent || lock_label || cannot?(:update, profile_field)
      %span.label.profile_field_label= profile_field.label
    - else
      = best_in_place profile_field, :label, classes: 'profile_field_label label', html_attrs: { placeholder: I18n.t(profile_field.underscored_type) }

  - # value
  %span.value-wrapper
    - if profile_field.cached_children_count == 0
      - if can? :update, profile_field
        - if profile_field.value.blank?
          = best_in_place profile_field, :value,
                          { type: input_type, nil: "—", classes: 'value' }.merge(display_method)
        - else
          = best_in_place profile_field, :value,
                          { type: input_type, nil: "…", classes: 'value' }.merge(display_method)
      - else
        - if display_method[:display_as]
          = profile_field.send(display_method[:display_as])
        - elsif display_method[:display_with] == :markdown
          = markdown(profile_field.value)
          
    - if profile_field.cached_children_count > 0
      %ul
        - profile_field.children.each do |child_field|
          = render partial: 'profile_fields/profile_field', object: child_field
    - if profile_field.type == ProfileFieldTypes::Address.name
      = render partial: 'profile_fields/wingolfspost_flag_switch', locals: { profile_field: profile_field }
    - # render partial: 'shared/flags', locals: { flagable: profile_field }
